name: üöÄ Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: üìÅ Checkout repository
      uses: actions/checkout@v4

    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: üì¶ Install dependencies
      run: npm ci

    - name: üî® Build project
      run: npm run build

    - name: üîß Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

    - name: üöÄ Deploy to server
      run: |
        # Criar backup do deploy anterior dentro do diret√≥rio do projeto
        ssh -i ~/.ssh/deploy_key ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} \
          "cd ${{ secrets.DEPLOY_PATH }} && if [ -d dist ]; then mv dist dist.backup.$(date +%Y%m%d_%H%M%S); fi"
        
        # Upload dos arquivos da build
        rsync -avz --delete -e "ssh -i ~/.ssh/deploy_key" \
          ./dist/ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.DEPLOY_PATH }}/dist/
        
        # Verificar se os arquivos foram enviados corretamente
        ssh -i ~/.ssh/deploy_key ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} \
          "cd ${{ secrets.DEPLOY_PATH }}/dist && ls -la"

    - name: ‚úÖ Verify deployment
      run: |
        # Verificar se o site est√° respondendo
        sleep 5
        curl -f http://${{ secrets.DEPLOY_HOST }}:8080 || exit 1

    - name: üìß Notify on success
      if: success()
      run: echo "‚úÖ Deploy realizado com sucesso para doe.childfundbrasil.org.br"

    - name: üìß Notify on failure
      if: failure()
      run: echo "‚ùå Falha no deploy. Verifique os logs."
